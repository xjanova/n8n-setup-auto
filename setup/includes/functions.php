<?php
/**
 * Helper Functions
 */

if (!defined('N8N_INSTALLER')) {
    die('Direct access not permitted');
}

/**
 * Load language file
 */
function load_language($lang = null) {
    if ($lang === null) {
        $lang = $_SESSION['language'] ?? DEFAULT_LANGUAGE;
    }

    $langFile = SETUP_DIR . '/language/' . $lang . '.php';

    if (file_exists($langFile)) {
        return require $langFile;
    }

    // Fallback to default language
    return require SETUP_DIR . '/language/' . DEFAULT_LANGUAGE . '.php';
}

/**
 * Get translated text
 */
function __($key, $default = '') {
    global $lang;

    if (!isset($lang)) {
        $lang = load_language();
    }

    return $lang[$key] ?? $default;
}

/**
 * Verify CSRF token
 */
function verify_csrf_token($token) {
    return isset($_SESSION['csrf_token']) && hash_equals($_SESSION['csrf_token'], $token);
}

/**
 * Generate random string
 */
function generate_random_string($length = 32) {
    return bin2hex(random_bytes($length / 2));
}

/**
 * Check if directory is writable
 */
function is_directory_writable($path) {
    if (!file_exists($path)) {
        return @mkdir($path, 0755, true);
    }

    return is_writable($path);
}

/**
 * Format bytes to human readable
 */
function format_bytes($bytes, $precision = 2) {
    $units = ['B', 'KB', 'MB', 'GB', 'TB'];

    for ($i = 0; $bytes > 1024; $i++) {
        $bytes /= 1024;
    }

    return round($bytes, $precision) . ' ' . $units[$i];
}

/**
 * Execute shell command safely
 */
function execute_command($command, &$output = null, &$return_var = null) {
    $output = [];
    $return_var = 0;

    exec($command . ' 2>&1', $output, $return_var);

    return $return_var === 0;
}

/**
 * Check if command exists
 */
function command_exists($command) {
    $return = shell_exec(sprintf("which %s 2>/dev/null", escapeshellarg($command)));
    return !empty($return);
}

/**
 * Get command version
 */
function get_command_version($command, $version_flag = '--version') {
    if (!command_exists($command)) {
        return false;
    }

    $output = shell_exec(sprintf("%s %s 2>&1", escapeshellarg($command), $version_flag));

    if (preg_match('/([0-9]+\.[0-9]+\.[0-9]+)/', $output, $matches)) {
        return $matches[1];
    }

    if (preg_match('/([0-9]+\.[0-9]+)/', $output, $matches)) {
        return $matches[1] . '.0';
    }

    return false;
}

/**
 * Compare versions
 */
function version_compare_safe($version1, $version2, $operator = '>=') {
    if ($version1 === false || $version2 === false) {
        return false;
    }

    return version_compare($version1, $version2, $operator);
}

/**
 * Download file from URL
 */
function download_file($url, $destination) {
    $ch = curl_init($url);

    if ($ch === false) {
        return false;
    }

    $fp = fopen($destination, 'w');

    if ($fp === false) {
        curl_close($ch);
        return false;
    }

    curl_setopt($ch, CURLOPT_FILE, $fp);
    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
    curl_setopt($ch, CURLOPT_TIMEOUT, 300);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
    curl_setopt($ch, CURLOPT_USERAGENT, 'N8N-Installer/1.0');

    $result = curl_exec($ch);

    curl_close($ch);
    fclose($fp);

    return $result !== false;
}

/**
 * Extract ZIP archive
 */
function extract_zip($zipFile, $destination) {
    if (!class_exists('ZipArchive')) {
        return false;
    }

    $zip = new ZipArchive();

    if ($zip->open($zipFile) !== true) {
        return false;
    }

    $result = $zip->extractTo($destination);
    $zip->close();

    return $result;
}

/**
 * Recursive delete directory
 */
function delete_directory($dir) {
    if (!file_exists($dir)) {
        return true;
    }

    if (!is_dir($dir)) {
        return unlink($dir);
    }

    foreach (scandir($dir) as $item) {
        if ($item == '.' || $item == '..') {
            continue;
        }

        if (!delete_directory($dir . DIRECTORY_SEPARATOR . $item)) {
            return false;
        }
    }

    return rmdir($dir);
}

/**
 * Write configuration file
 */
function write_config_file($filepath, $config) {
    $content = "<?php\n";
    $content .= "/**\n";
    $content .= " * N8N Configuration\n";
    $content .= " * Generated by N8N Web Installer\n";
    $content .= " * Date: " . date('Y-m-d H:i:s') . "\n";
    $content .= " */\n\n";

    foreach ($config as $key => $value) {
        if (is_string($value)) {
            $content .= "define('" . strtoupper($key) . "', '" . addslashes($value) . "');\n";
        } elseif (is_bool($value)) {
            $content .= "define('" . strtoupper($key) . "', " . ($value ? 'true' : 'false') . ");\n";
        } elseif (is_numeric($value)) {
            $content .= "define('" . strtoupper($key) . "', " . $value . ");\n";
        }
    }

    return file_put_contents($filepath, $content) !== false;
}

/**
 * Create .env file for N8N
 */
function create_env_file($filepath, $config) {
    $content = "# N8N Environment Configuration\n";
    $content .= "# Generated by N8N Web Installer\n";
    $content .= "# Date: " . date('Y-m-d H:i:s') . "\n\n";

    foreach ($config as $key => $value) {
        $content .= strtoupper($key) . "=" . $value . "\n";
    }

    return file_put_contents($filepath, $content) !== false;
}

/**
 * Log message to file
 */
function log_message($message, $level = 'INFO') {
    $logFile = SETUP_DIR . '/installer.log';
    $timestamp = date('Y-m-d H:i:s');
    $logEntry = "[$timestamp] [$level] $message\n";

    return file_put_contents($logFile, $logEntry, FILE_APPEND) !== false;
}

/**
 * JSON response
 */
function json_response($success, $message = '', $data = []) {
    header('Content-Type: application/json');

    echo json_encode([
        'success' => $success,
        'message' => $message,
        'data' => $data
    ]);

    exit;
}

/**
 * Sanitize input
 */
function sanitize_input($input) {
    if (is_array($input)) {
        return array_map('sanitize_input', $input);
    }

    return htmlspecialchars(trim($input), ENT_QUOTES, 'UTF-8');
}

/**
 * Validate email
 */
function validate_email($email) {
    return filter_var($email, FILTER_VALIDATE_EMAIL) !== false;
}

/**
 * Validate URL
 */
function validate_url($url) {
    return filter_var($url, FILTER_VALIDATE_URL) !== false;
}

/**
 * Get server protocol
 */
function get_server_protocol() {
    return isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on' ? 'https' : 'http';
}

/**
 * Get server host
 */
function get_server_host() {
    return $_SERVER['HTTP_HOST'] ?? 'localhost';
}

/**
 * Get base URL
 */
function get_base_url() {
    $protocol = get_server_protocol();
    $host = get_server_host();
    $script = dirname($_SERVER['SCRIPT_NAME']);

    return $protocol . '://' . $host . rtrim($script, '/');
}

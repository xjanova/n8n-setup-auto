<?php
require_once 'config.php';

// Disable output buffering for real-time streaming
if (ob_get_level()) ob_end_clean();
header('Content-Type: text/event-stream');
header('Cache-Control: no-cache');
header('X-Accel-Buffering: no');

// Function to send log to client
function sendLog($message, $type = 'info') {
    $data = json_encode([
        'message' => $message,
        'type' => $type,
        'time' => date('H:i:s')
    ]);
    echo "data: {$data}\n\n";
    if (ob_get_level()) ob_flush();
    flush();
    usleep(100000); // 0.1 second delay for visual effect
}

// Get form data
$dbType = $_POST['db_type'] ?? 'mysql';
$n8nUrl = $_POST['n8n_url'] ?? '';
$adminEmail = $_POST['admin_email'] ?? '';
$adminPass = $_POST['admin_pass'] ?? '';
$encryptionKey = $_POST['encryption_key'] ?? '';
$dbHost = $_POST['db_host'] ?? 'localhost';
$dbPort = $_POST['db_port'] ?? '3306';
$dbName = $_POST['db_name'] ?? '';
$dbUser = $_POST['db_user'] ?? '';
$dbPass = $_POST['db_pass'] ?? '';

try {
    sendLog('=================================================', 'header');
    sendLog('  N8N Installation Starting', 'header');
    sendLog('  ' . COMPANY_NAME, 'header');
    sendLog('=================================================', 'header');
    sendLog('');

    // Validate
    sendLog('[1/10] Validating configuration...', 'step');

    if (empty($n8nUrl) || empty($adminEmail) || empty($adminPass) || empty($encryptionKey)) {
        sendLog('ERROR: Missing required fields', 'error');
        sendLog('data: {"complete": true, "success": false}' . "\n\n");
        exit;
    }

    $parsed = parse_url($n8nUrl);
    if (!isset($parsed['scheme']) || strtolower($parsed['scheme']) !== 'https') {
        sendLog('ERROR: N8N URL must use HTTPS protocol', 'error');
        sendLog('data: {"complete": true, "success": false}' . "\n\n");
        exit;
    }

    if (strlen($encryptionKey) < 32) {
        sendLog('ERROR: Encryption key must be at least 32 characters', 'error');
        sendLog('data: {"complete": true, "success": false}' . "\n\n");
        exit;
    }

    sendLog('✓ Configuration validated', 'success');
    sendLog('');

    // Check Node.js and npm
    sendLog('[2/10] Checking Node.js and npm...', 'step');
    exec('which node 2>&1', $nodeOutput, $nodeReturn);
    exec('which npm 2>&1', $npmOutput, $npmReturn);

    if ($nodeReturn !== 0) {
        sendLog('ERROR: Node.js is not installed', 'error');
        sendLog('data: {"complete": true, "success": false}' . "\n\n");
        exit;
    }
    if ($npmReturn !== 0) {
        sendLog('ERROR: npm is not installed', 'error');
        sendLog('data: {"complete": true, "success": false}' . "\n\n");
        exit;
    }

    exec('node --version 2>&1', $nodeVer);
    exec('npm --version 2>&1', $npmVer);
    sendLog('✓ Node.js ' . trim($nodeVer[0]), 'success');
    sendLog('✓ npm v' . trim($npmVer[0]), 'success');
    sendLog('');

    // Create directories
    sendLog('[3/10] Creating directories...', 'step');
    $n8nDir = INSTALL_ROOT . '/n8n';
    if (!is_dir($n8nDir)) {
        mkdir($n8nDir, 0755, true);
        sendLog('✓ Created N8N directory: ' . $n8nDir, 'success');
    } else {
        sendLog('✓ N8N directory exists', 'success');
    }
    sendLog('');

    // Create .env file
    sendLog('[4/10] Creating environment configuration...', 'step');
    $envContent = "# N8N Configuration - Generated by " . COMPANY_NAME . "\n";
    $envContent .= "# Generated at: " . date('Y-m-d H:i:s') . "\n\n";
    $envContent .= "N8N_BASIC_AUTH_ACTIVE=true\n";
    $envContent .= "N8N_BASIC_AUTH_USER=" . $adminEmail . "\n";
    $envContent .= "N8N_BASIC_AUTH_PASSWORD=" . $adminPass . "\n";
    $envContent .= "N8N_ENCRYPTION_KEY=" . $encryptionKey . "\n";
    $envContent .= "N8N_HOST=" . $n8nUrl . "\n";
    $envContent .= "N8N_PROTOCOL=https\n";
    $envContent .= "N8N_PORT=5678\n\n";

    if ($dbType === 'sqlite') {
        $envContent .= "DB_TYPE=sqlite\n";
        $envContent .= "DB_SQLITE_DATABASE=" . INSTALL_ROOT . "/n8n.db\n";
        sendLog('✓ Database: SQLite', 'success');
    } elseif ($dbType === 'mysql') {
        $envContent .= "DB_TYPE=mysqldb\n";
        $envContent .= "DB_MYSQLDB_HOST=" . $dbHost . "\n";
        $envContent .= "DB_MYSQLDB_PORT=" . $dbPort . "\n";
        $envContent .= "DB_MYSQLDB_DATABASE=" . $dbName . "\n";
        $envContent .= "DB_MYSQLDB_USER=" . $dbUser . "\n";
        $envContent .= "DB_MYSQLDB_PASSWORD=" . $dbPass . "\n";
        sendLog('✓ Database: MySQL (' . $dbHost . ':' . $dbPort . '/' . $dbName . ')', 'success');
    } elseif ($dbType === 'postgres') {
        $envContent .= "DB_TYPE=postgresdb\n";
        $envContent .= "DB_POSTGRESDB_HOST=" . $dbHost . "\n";
        $envContent .= "DB_POSTGRESDB_PORT=" . $dbPort . "\n";
        $envContent .= "DB_POSTGRESDB_DATABASE=" . $dbName . "\n";
        $envContent .= "DB_POSTGRESDB_USER=" . $dbUser . "\n";
        $envContent .= "DB_POSTGRESDB_PASSWORD=" . $dbPass . "\n";
        sendLog('✓ Database: PostgreSQL (' . $dbHost . ':' . $dbPort . '/' . $dbName . ')', 'success');
    }

    file_put_contents($n8nDir . '/.env', $envContent);
    sendLog('✓ Created .env file', 'success');
    sendLog('');

    // Create package.json
    sendLog('[5/10] Creating package.json...', 'step');
    $packageJson = [
        'name' => 'n8n-instance',
        'version' => '1.0.0',
        'description' => 'N8N instance for ' . COMPANY_NAME,
        'scripts' => [
            'start' => 'n8n start',
            'stop' => 'pkill -f n8n'
        ],
        'dependencies' => [
            'n8n' => 'latest'
        ]
    ];
    file_put_contents($n8nDir . '/package.json', json_encode($packageJson, JSON_PRETTY_PRINT));
    sendLog('✓ Created package.json', 'success');
    sendLog('');

    // Install N8N globally
    sendLog('[6/10] Installing N8N globally...', 'step');
    sendLog('This may take 2-5 minutes depending on your connection', 'info');
    sendLog('', 'info');

    $cmd = 'npm install -g n8n 2>&1';
    $handle = popen($cmd, 'r');
    $lineCount = 0;
    while (!feof($handle)) {
        $line = fgets($handle);
        if (!empty(trim($line))) {
            $lineCount++;
            // Show some output but not everything
            if ($lineCount % 10 == 0 || strpos($line, 'added') !== false || strpos($line, 'done') !== false) {
                sendLog('  ' . trim($line), 'info');
            }
        }
    }
    $return = pclose($handle);

    if ($return === 0) {
        sendLog('✓ N8N installed globally', 'success');
    } else {
        sendLog('⚠ Warning: Global installation may have issues', 'warning');
    }
    sendLog('');

    // Install N8N locally
    sendLog('[7/10] Installing N8N in project directory...', 'step');
    sendLog('Installing dependencies...', 'info');
    sendLog('');

    $currentDir = getcwd();
    chdir($n8nDir);

    $cmd = 'npm install 2>&1';
    $handle = popen($cmd, 'r');
    $lineCount = 0;
    while (!feof($handle)) {
        $line = fgets($handle);
        if (!empty(trim($line))) {
            $lineCount++;
            if ($lineCount % 10 == 0 || strpos($line, 'added') !== false || strpos($line, 'done') !== false) {
                sendLog('  ' . trim($line), 'info');
            }
        }
    }
    $return = pclose($handle);

    chdir($currentDir);

    if ($return === 0) {
        sendLog('✓ N8N dependencies installed', 'success');
    } else {
        sendLog('⚠ Some dependencies may have warnings (usually ok)', 'warning');
    }
    sendLog('');

    // Create scripts
    sendLog('[8/10] Creating start/stop scripts...', 'step');

    // Start script
    $startScript = "#!/bin/bash\n";
    $startScript .= "# N8N Start Script - Generated by " . COMPANY_NAME . "\n\n";
    $startScript .= "cd " . $n8nDir . "\n";
    $startScript .= "export N8N_USER_FOLDER=" . $n8nDir . "\n";
    $startScript .= "export N8N_BASIC_AUTH_ACTIVE=true\n";
    $startScript .= "export N8N_BASIC_AUTH_USER=\"{$adminEmail}\"\n";
    $startScript .= "export N8N_BASIC_AUTH_PASSWORD=\"{$adminPass}\"\n";
    $startScript .= "export N8N_ENCRYPTION_KEY=\"{$encryptionKey}\"\n";
    $startScript .= "export N8N_HOST=\"{$n8nUrl}\"\n";
    $startScript .= "export N8N_PROTOCOL=https\n";
    $startScript .= "export N8N_PORT=5678\n\n";

    if ($dbType === 'sqlite') {
        $startScript .= "export DB_TYPE=sqlite\n";
        $startScript .= "export DB_SQLITE_DATABASE=" . INSTALL_ROOT . "/n8n.db\n";
    } elseif ($dbType === 'mysql') {
        $startScript .= "export DB_TYPE=mysqldb\n";
        $startScript .= "export DB_MYSQLDB_HOST=\"{$dbHost}\"\n";
        $startScript .= "export DB_MYSQLDB_PORT=\"{$dbPort}\"\n";
        $startScript .= "export DB_MYSQLDB_DATABASE=\"{$dbName}\"\n";
        $startScript .= "export DB_MYSQLDB_USER=\"{$dbUser}\"\n";
        $startScript .= "export DB_MYSQLDB_PASSWORD=\"{$dbPass}\"\n";
    } elseif ($dbType === 'postgres') {
        $startScript .= "export DB_TYPE=postgresdb\n";
        $startScript .= "export DB_POSTGRESDB_HOST=\"{$dbHost}\"\n";
        $startScript .= "export DB_POSTGRESDB_PORT=\"{$dbPort}\"\n";
        $startScript .= "export DB_POSTGRESDB_DATABASE=\"{$dbName}\"\n";
        $startScript .= "export DB_POSTGRESDB_USER=\"{$dbUser}\"\n";
        $startScript .= "export DB_POSTGRESDB_PASSWORD=\"{$dbPass}\"\n";
    }

    $startScript .= "\nn8n start\n";

    file_put_contents($n8nDir . '/start.sh', $startScript);
    chmod($n8nDir . '/start.sh', 0755);
    sendLog('✓ Created start.sh', 'success');

    // Stop script
    $stopScript = "#!/bin/bash\npkill -f 'n8n start'\necho 'N8N stopped'\n";
    file_put_contents($n8nDir . '/stop.sh', $stopScript);
    chmod($n8nDir . '/stop.sh', 0755);
    sendLog('✓ Created stop.sh', 'success');

    // Systemd service
    $user = posix_getpwuid(posix_geteuid())['name'];
    $serviceContent = "[Unit]\nDescription=N8N Workflow Automation\nAfter=network.target\n\n";
    $serviceContent .= "[Service]\nType=simple\nUser={$user}\n";
    $serviceContent .= "WorkingDirectory={$n8nDir}\nExecStart={$n8nDir}/start.sh\n";
    $serviceContent .= "Restart=on-failure\n\n[Install]\nWantedBy=multi-user.target\n";
    file_put_contents($n8nDir . '/n8n.service', $serviceContent);
    sendLog('✓ Created n8n.service', 'success');
    sendLog('');

    // Create installation info
    sendLog('[9/10] Saving installation information...', 'step');
    $info = [
        'installed_at' => date('Y-m-d H:i:s'),
        'version' => VERSION,
        'build' => BUILD,
        'url' => $n8nUrl,
        'admin_email' => $adminEmail,
        'database' => $dbType,
        'company' => COMPANY_NAME
    ];
    file_put_contents($n8nDir . '/install-info.json', json_encode($info, JSON_PRETTY_PRINT));
    sendLog('✓ Installation info saved', 'success');
    sendLog('');

    // Start N8N
    sendLog('[10/10] Starting N8N service...', 'step');
    exec("cd {$n8nDir} && nohup ./start.sh > n8n.log 2>&1 & echo $!", $pidOutput);

    if (!empty($pidOutput[0])) {
        file_put_contents($n8nDir . '/n8n.pid', $pidOutput[0]);
        sendLog('✓ N8N started (PID: ' . $pidOutput[0] . ')', 'success');
        sendLog('✓ N8N is running on port 5678', 'success');
    } else {
        sendLog('⚠ N8N may not have started automatically', 'warning');
        sendLog('  You can start manually: cd ' . $n8nDir . ' && ./start.sh', 'info');
    }
    sendLog('');

    // Complete
    $_SESSION['install_complete'] = true;

    sendLog('=================================================', 'header');
    sendLog('  Installation Completed Successfully!', 'header');
    sendLog('=================================================', 'header');
    sendLog('');
    sendLog('✓ N8N URL: ' . $n8nUrl, 'success');
    sendLog('✓ Admin Email: ' . $adminEmail, 'success');
    sendLog('✓ Database: ' . strtoupper($dbType), 'success');
    sendLog('✓ Installation directory: ' . $n8nDir, 'success');
    sendLog('');
    sendLog('Next steps:', 'info');
    sendLog('1. Access N8N: ' . $n8nUrl, 'info');
    sendLog('2. Login with your admin email and password', 'info');
    sendLog('3. Check logs: tail -f ' . $n8nDir . '/n8n.log', 'info');
    sendLog('');

    // Send completion signal
    echo "data: " . json_encode(['complete' => true, 'success' => true, 'url' => $n8nUrl, 'email' => $adminEmail]) . "\n\n";
    if (ob_get_level()) ob_flush();
    flush();

} catch (Exception $e) {
    sendLog('', 'error');
    sendLog('ERROR: ' . $e->getMessage(), 'error');
    sendLog('Installation failed!', 'error');
    echo "data: " . json_encode(['complete' => true, 'success' => false]) . "\n\n";
    if (ob_get_level()) ob_flush();
    flush();
}
